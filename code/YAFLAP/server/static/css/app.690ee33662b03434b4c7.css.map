{"version":3,"sources":["C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/TabView.vue","TabView.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/AttributePanel.vue","AttributePanel.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/MatchingPanel.vue","MatchingPanel.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/GeneratorPanel.vue","GeneratorPanel.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/SidePanel.vue","SidePanel.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/DropMenu.vue","DropMenu.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/EditBoard.vue","EditBoard.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/EditModeButtons.vue","EditModeButtons.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/AutomataBoard.vue","AutomataBoard.vue","C:/Users/Dongcai/Documents/Projects/YAFLAP/code/YAFLAP/src/components/src/components/GeneratorBoard.vue","GeneratorBoard.vue"],"names":[],"mappings":"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","file":"app.690ee33662b03434b4c7.css","sourcesContent":["<template>\r\n  <ul class=\"tabs\">\r\n    <li v-for=\"tab of tabs\" class=\"tab-item\"\r\n      :class=\"{ 'tab-item-selected': value === tab.id }\"\r\n      v-bind:key=\"tab.id\"\r\n      @click=\"$emit('input', tab.id)\">\r\n      <a href=\"javascript:void(0);\">{{ tab.title }}</a>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'tab-view',\r\n  props: {\r\n    tabs: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    value: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  methods: {\r\n    switchTag (tabInfo, $event) {\r\n      this.delegate.select(tabInfo.id)\r\n      this.$emit('switch-panel', { refPanel: tabInfo.refPanel })\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n.tabs {\r\n  display: flex;\r\n  justify-content:space-evenly;\r\n  align-items: center;\r\n  flex-wrap: nowrap;\r\n  height: 40px;\r\n  box-shadow: 3px 3px 0px black;\r\n  border-radius: 3px;\r\n  padding: 0;\r\n}\r\n.tab-item {\r\n  box-sizing: border-box;\r\n  font-size: 17px;\r\n  background: rgb(206, 238, 226);\r\n  border: 2px solid brown;\r\n  height: 100%;\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  text-align: center;\r\n  line-height: 30px;\r\n  list-style-type: none;\r\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n  letter-spacing: 1.1;\r\n}\r\n\r\n.tab-item > a {\r\n  color: black;\r\n  text-decoration: none;\r\n}\r\n.tab-item-selected {\r\n  background: whitesmoke;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.tabs {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-pack:space-evenly;\r\n      -ms-flex-pack:space-evenly;\r\n          justify-content:space-evenly;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  -ms-flex-wrap: nowrap;\r\n      flex-wrap: nowrap;\r\n  height: 40px;\r\n  -webkit-box-shadow: 3px 3px 0px black;\r\n          box-shadow: 3px 3px 0px black;\r\n  border-radius: 3px;\r\n  padding: 0;\r\n}\r\n.tab-item {\r\n  -webkit-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n  font-size: 17px;\r\n  background: rgb(206, 238, 226);\r\n  border: 2px solid brown;\r\n  height: 100%;\r\n  -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n          flex-grow: 1;\r\n  -ms-flex-negative: 1;\r\n      flex-shrink: 1;\r\n  text-align: center;\r\n  line-height: 30px;\r\n  list-style-type: none;\r\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n  letter-spacing: 1.1;\r\n}\r\n.tab-item > a {\r\n  color: black;\r\n  text-decoration: none;\r\n}\r\n.tab-item-selected {\r\n  background: whitesmoke;\r\n}\r\n","<template>\r\n    <div class=\"panel\">\r\n        <section class=\"section\" v-for=\"section of sections\" v-bind:key=\"section.id\">\r\n          <h5 class=\"section-header\">{{ section.title }}</h5>\r\n          <p class=\"section-content\">{{ section.content }}</p>\r\n        </section>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { mapState } from 'vuex'\r\nexport default {\r\n  name: 'attribute-panel',\r\n  data () {\r\n    return {\r\n    }\r\n  },\r\n  computed: {\r\n      ...mapState({\r\n      automataType: state => state.AutomataStore.automataType,\r\n      nodeCount: state => state.AutomataStore.nodeCount,\r\n      edgeCount: state => state.AutomataStore.edgeCount,\r\n    }),\r\n    sections () {\r\n      return [\r\n        { id: 'automataType', title: 'Automata Type', content: this.automataType },\r\n        { id: 'nodeCount', title: 'Node Count', content: this.nodeCount },\r\n        { id: 'edgeCount', title: 'Edge Count', content: this.edgeCount }\r\n      ]\r\n    }\r\n  }\r\n\r\n}\r\n</script>\r\n<style scoped>\r\n.panel {\r\n  margin-top: 10px;\r\n}\r\n.section {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  border: 3px solid rgb(102, 38, 38);\r\n  margin-bottom: 8px;\r\n  box-shadow: 3px 3px 0px black;\r\n}\r\n.section-header {\r\n  margin: 0;\r\n  line-height: 50px;\r\n  padding: 5px 3px;\r\n  box-sizing: border-box;\r\n  background: rgb(206, 238, 226);\r\n  color: black;\r\n  font-size: 26px;\r\n  font-weight: 600;\r\n  letter-spacing: 1.1;\r\n  padding-left: 15px;\r\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n}\r\n.section-content {\r\n  padding-left: 15px;\r\n  font-family: 'Courier New', Courier, monospace;\r\n  font-weight: 600;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.panel {\r\n  margin-top: 10px;\r\n}\r\n.section {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  padding: 0;\r\n  -webkit-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n  border: 3px solid rgb(102, 38, 38);\r\n  margin-bottom: 8px;\r\n  -webkit-box-shadow: 3px 3px 0px black;\r\n          box-shadow: 3px 3px 0px black;\r\n}\r\n.section-header {\r\n  margin: 0;\r\n  line-height: 50px;\r\n  padding: 5px 3px;\r\n  -webkit-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n  background: rgb(206, 238, 226);\r\n  color: black;\r\n  font-size: 26px;\r\n  font-weight: 600;\r\n  letter-spacing: 1.1;\r\n  padding-left: 15px;\r\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n}\r\n.section-content {\r\n  padding-left: 15px;\r\n  font-family: 'Courier New', Courier, monospace;\r\n  font-weight: 600;\r\n}\r\n","<template>\r\n  <div class=\"matching-panel\">\r\n    <h3 class=\"result\">\r\n      <div class=\"result-title\">THE RESULT IS</div>\r\n      <div class=\"result-content\" :class=\"{ ok: result === 'ok', failed: result === 'failed' }\">{{ result }}</div>\r\n    </h3>\r\n    <div class=\"matchbox-wrapper\">\r\n      <input class=\"matchbox\" placeholder=\"Enter string to match\" type=\"text\" v-model=\"inputValue\">\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'matching-panel',\r\n  data () {\r\n    return {\r\n      inputValue: ''\r\n    }\r\n  },\r\n  computed: {\r\n    result () {\r\n      return this.$store.state.AutomataStore.matchPair.result\r\n    },\r\n    str () {\r\n      return this.$store.state.AutomataStore.matchPair.str\r\n    }\r\n  },\r\n  watch: {\r\n    inputValue (value) {\r\n      this.$store.dispatch('matchString', value)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.matching-panel {\r\n  width: 300px;\r\n}\r\n.result {\r\n  box-sizing: border-box;\r\n  border: 10px solid brown;\r\n  height: 160px;\r\n  text-align: center;\r\n  margin: 10px 0;\r\n  position: relative;\r\n  box-shadow: 3px 3px 0 black;\r\n  background: rgb(237, 255, 248);\r\n}\r\n.result-content {\r\n  font-size: 14px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 52px;\r\n  font-style: italic;\r\n}\r\n.result-title {\r\n  margin-top: 20px;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n}\r\n.matchbox-wrapper {\r\n  margin: 30px auto;\r\n  width: 100%;\r\n  height: 40px;\r\n  border: 3px solid brown;\r\n  box-shadow: 3px 3px 0px black;\r\n}\r\n.matchbox {\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 16px;\r\n  outline-color: transparent;\r\n}\r\n.ok {\r\n  color: green;\r\n}\r\n.failed {\r\n  color: red;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.matching-panel {\r\n  width: 300px;\r\n}\r\n.result {\r\n  -webkit-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n  border: 10px solid brown;\r\n  height: 160px;\r\n  text-align: center;\r\n  margin: 10px 0;\r\n  position: relative;\r\n  -webkit-box-shadow: 3px 3px 0 black;\r\n          box-shadow: 3px 3px 0 black;\r\n  background: rgb(237, 255, 248);\r\n}\r\n.result-content {\r\n  font-size: 14px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  -webkit-transform: translate(-50%, -50%);\r\n          transform: translate(-50%, -50%);\r\n  font-size: 52px;\r\n  font-style: italic;\r\n}\r\n.result-title {\r\n  margin-top: 20px;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n}\r\n.matchbox-wrapper {\r\n  margin: 30px auto;\r\n  width: 100%;\r\n  height: 40px;\r\n  border: 3px solid brown;\r\n  -webkit-box-shadow: 3px 3px 0px black;\r\n          box-shadow: 3px 3px 0px black;\r\n}\r\n.matchbox {\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 16px;\r\n  outline-color: transparent;\r\n}\r\n.ok {\r\n  color: green;\r\n}\r\n.failed {\r\n  color: red;\r\n}\r\n","<template>\r\n<div class=\"row\">\r\n  <p class=\"col s12\">\r\n    <button @click=\"$router.push('/generators')\">Go to generator page >>></button>\r\n  </p>\r\n</div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'generator-panel'\r\n}\r\n</script>\r\n<style scoped>\r\nbutton {\r\n  display: block;\r\n  width: 100%;\r\n  height: 50px;\r\n  font-size: 20px;\r\n  font-style: italic;\r\n  border: 3px solid rgb(102, 38, 38);\r\n  background-color: rgb(206, 238, 226);\r\n  box-shadow: 3px 3px 0 black;\r\n}\r\nbutton:hover {\r\n  box-shadow: 3px 3px 1px #999999;\r\n}\r\nbutton:active {\r\n  box-shadow: 3px 3px 1px #999999;\r\n  background-color: rgb(130, 100, 70);\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\r\nbutton {\r\n  display: block;\r\n  width: 100%;\r\n  height: 50px;\r\n  font-size: 20px;\r\n  font-style: italic;\r\n  border: 3px solid rgb(102, 38, 38);\r\n  background-color: rgb(206, 238, 226);\r\n  -webkit-box-shadow: 3px 3px 0 black;\r\n          box-shadow: 3px 3px 0 black;\r\n}\r\nbutton:hover {\r\n  -webkit-box-shadow: 3px 3px 1px #999999;\r\n          box-shadow: 3px 3px 1px #999999;\r\n}\r\nbutton:active {\r\n  -webkit-box-shadow: 3px 3px 1px #999999;\r\n          box-shadow: 3px 3px 1px #999999;\r\n  background-color: rgb(130, 100, 70);\r\n}\r\n","<template>\r\n  <div class=\"side-panel\">\r\n    <div>\r\n      <h3 class=\"title\">{{ title }}</h3>\r\n      <p>{{ websideDesc }}</p>\r\n    </div>\r\n    <tab-view :tabs=\"tabs\" v-model=\"currentSidePanel\"></tab-view>\r\n    <keep-alive>\r\n      <component v-bind:is=\"currentSidePanel\"></component>\r\n    </keep-alive>\r\n  </div>\r\n</template>\r\n<script>\r\nimport TabView from '@/components/TabView'\r\nimport AttributePanel from '@/components/AttributePanel'\r\nimport MatchingPanel from '@/components/MatchingPanel'\r\nimport GeneratorPanel from '@/components/GeneratorPanel'\r\n\r\nexport default {\r\n  name: 'side-panel',\r\n  data () {\r\n    return {\r\n      title: 'YAFLAP',\r\n      websideDesc: 'Yet Another Formal Lanuage and Automata Package',\r\n      currentSidePanel: 'AttributePanel',\r\n      tabs: [\r\n        { id: 'AttributePanel', title: 'Attribute' },\r\n        { id: 'MatchingPanel', title: 'Match' },\r\n        { id: 'GeneratorPanel', title: 'Generator' }\r\n      ],\r\n    }\r\n  },\r\n  components: { TabView, AttributePanel, MatchingPanel, GeneratorPanel }\r\n}\r\n</script>\r\n<style scoped>\r\n.panels {\r\n  margin-top: 30px;\r\n  width: 90%;\r\n}\r\n.title {\r\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n  font-size: 40px;\r\n  margin: 10px 0;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.panels {\r\n  margin-top: 30px;\r\n  width: 90%;\r\n}\r\n.title {\r\n  font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n  font-size: 40px;\r\n  margin: 10px 0;\r\n}\r\n","<template>\r\n<ul class=\"drop-menu\">\r\n  <li class=\"drop-menu-item\" v-for=\"item of items\" :Key=\"item.key\" @click=\"$emit('click-item', item.key)\">\r\n    {{ item.title }}\r\n  </li>\r\n</ul>\r\n</template>\r\n<script>\r\nimport { NODE_TYPE } from '@/utils/enum'\r\n\r\nexport default {\r\n  name: 'drop-menu',\r\n  props: {\r\n    items: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  created () {\r\n    this.NODE_TYPE = NODE_TYPE\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.drop-menu-item {\r\n  padding: 6px 8px;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  border-bottom: 1px black solid;\r\n  list-style-type: none;\r\n}\r\n\r\n.drop-menu-item:hover {\r\n  background-color:#EAEAEA;\r\n}\r\n\r\n.drop-menu {\r\n  border: 1px #AE20BB solid;\r\n  margin-bottom: 10px;\r\n  background-color: #FFFFFF;\r\n  border-radius: 3px;\r\n  box-shadow: 3px 3px 0 black;\r\n  padding: 0;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.drop-menu-item {\r\n  padding: 6px 8px;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  border-bottom: 1px black solid;\r\n  list-style-type: none;\r\n}\r\n\r\n.drop-menu-item:hover {\r\n  background-color:#EAEAEA;\r\n}\r\n\r\n.drop-menu {\r\n  border: 1px #AE20BB solid;\r\n  margin-bottom: 10px;\r\n  background-color: #FFFFFF;\r\n  border-radius: 3px;\r\n  -webkit-box-shadow: 3px 3px 0 black;\r\n          box-shadow: 3px 3px 0 black;\r\n  padding: 0;\r\n}\r\n","<template>\r\n  <div class=\"base\">\r\n    <svg\r\n      class=\"graph\"\r\n      @mousemove=\"_handleBoardMouseMoveEvent\"\r\n      @mouseup=\"_handleBoardMouseUpEvent\">\r\n      <defs>\r\n        <marker\r\n          id=\"edgeArrow\"\r\n          markerWidth='6'\r\n          markerHeight='6'\r\n          viewBox=\"-2 -5 10 10\"\r\n          refX=\"20\"\r\n          refY='-1'\r\n          orient='auto'\r\n          markerUnits='strokeWidth'>\r\n          <path d='M-1,-4 L10,-1 L2,5 z' fill='#334400' />\r\n        </marker>\r\n        <marker\r\n          id=\"freeEdgeArrow\"\r\n          markerWidth='6'\r\n          markerHeight='6'\r\n          viewBox=\"-2 -5 10 10\"\r\n          refX=\"0\"\r\n          refY='0'\r\n          orient='auto'\r\n          markerUnits='strokeWidth'>\r\n          <path d='M-1,-4 L10,-1 L2,5 z' fill='#334400' />\r\n        </marker>\r\n        <marker\r\n          v-for=\"edge of edges\" :key=\"edge.id\"\r\n          :id=\"`edge-label-marker-${edge.id}`\"\r\n          markerWidth='100'\r\n          markerHeight='9'\r\n          viewBox=\"-10 -20 40 30\"\r\n          refX=\"0\"\r\n          refY='10'\r\n          orient='0'\r\n          markerUnits='strokeWidth'>\r\n          <text text-anchor=\"middle\">{{ edge.label }}</text>\r\n        </marker>\r\n      </defs>\r\n      <g data-free-edge=\"free-edge\" v-show=\"isFreeEdgeVisible\">\r\n        <path\r\n          class=\"edge-overlay\"\r\n          :d='_getArcPath(freeEdge.source.x, freeEdge.source.y, freeEdge.target.x, freeEdge.target.y)'/>\r\n        <path\r\n          class=\"edge\"\r\n          marker-end=\"url(#freeEdgeArrow)\"\r\n          :d='_getArcPath(freeEdge.source.x, freeEdge.source.y, freeEdge.target.x, freeEdge.target.y)'/>\r\n      </g>\r\n      <g>\r\n        <g v-for='edge of edges' :key=\"edge.id\"\r\n          :data-edge-id=\"edge.id\"\r\n          :data-edge-source=\"edge.source\" :data-edge-target=\"edge.target\"\r\n          @click=\"_handleEdgeClickEvent\">\r\n          <path\r\n            class=\"edge-overlay\"\r\n            :d='_linkArc(edge)'\r\n            :data-edge-source=\"edge.source\"\r\n            :data-edge-target=\"edge.target\"/>\r\n          <path\r\n            class=\"edge\"\r\n            v-bind=\"{ 'id' : `${name}-${edge.id}` }\"\r\n            :data-edge-source=\"edge.source\"\r\n            :data-edge-target=\"edge.target\"\r\n            :d='_linkArc(edge)'\r\n            :marker-mid=\"`url(#edge-label-marker-${edge.id})`\"\r\n            marker-end=\"url(#edgeArrow)\"/>\r\n            <!--  FIXME temporary solution -->\r\n          <text\r\n            v-if=\"edge.source === edge.target\"\r\n            text-anchor=\"middle\"\r\n            :transform=\"__temporary_getTransformOfSelfConnectedEdge(edge)\"\r\n            >{{ edge.label }}\r\n          </text>\r\n        </g>\r\n      </g>\r\n      <g>\r\n        <g v-for=\"node of nodes\"\r\n          :data-node-id='node.id'\r\n          :key='node.id'\r\n          :class='`node node-${node.type}`'\r\n          @mousedown=\"_handleNodeMouseDownEvent\"\r\n          @mousemove=\"_handleNodeMouseMoveEvent\"\r\n          @mouseup=\"_handleNodeMouseUpEvent\"\r\n          @dblclick=\"_handleNodeDblClickEvent\"\r\n          @contextmenu=\"_handleNodeContextMenuEvent\">\r\n          <circle :r=\"nodeRadius\" :transform=\"`translate(${node.x}, ${node.y})`\" :data-node-id='node.id' />\r\n          <text text-anchor=\"middle\" :transform=\"`translate(${node.x}, ${node.y + 1.8 * nodeRadius})`\" :data-node-id='node.id'>{{ node.label }}</text>\r\n          <path v-if=\"node.type === 'start' || node.type === 'start-finish'\" stroke=\"3\" fill=\"#000000\" :d=\"`M ${node.x-nodeRadius},${node.y} L${node.x - 2 * nodeRadius},${node.y-nodeRadius} L ${node.x - 2 * nodeRadius},${node.y+nodeRadius} Z`\" :data-node-id='node.id'/>\r\n        </g>\r\n      </g>\r\n    </svg>\r\n    <drop-menu\r\n      class=\"node-menu\"\r\n      :items=\"menuItems\"\r\n      @click-item=\"_handleMenuClickItemEvent\"\r\n      :style=\"{ top: nodeMenuPosition.y, left: nodeMenuPosition.x }\"\r\n      v-if=\"shouldShowNodeMenu\"\r\n    />\r\n    <edit-field ref=\"nodeEditField\"\r\n      class=\"edit-field\"\r\n      v-if=\"shouldShowEditField\"\r\n      :style=\"{ top: this.editFieldPosition.y, left: this.editFieldPosition.x }\"\r\n      v-model=\"editFieldInput\"\r\n      @submit=\"_commitInput\"/>\r\n    <div ref=\"overlay\" class=\"overlay\" v-if=\"shouldShowOverlay\" @click=\"_handleOverlayClickEvent\">&nbsp;</div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport EditField from './EditField.vue'\r\nimport DropMenu from './DropMenu.vue'\r\n\r\nclass Edge {\r\n  constructor (options) {\r\n    this.source = options.source\r\n    this.target = options.target\r\n    this.label = options.label\r\n  }\r\n\r\n  get id () {\r\n    return `${this.source}-${this.target}`\r\n  }\r\n}\r\n\r\nclass Node {\r\n  constructor (options) {\r\n    this.id = String(options.id)\r\n    this.x = options.x\r\n    this.y = options.y\r\n    this.label = options.label\r\n    this.type = options.type\r\n  }\r\n}\r\n\r\nfunction _getEdgeClickEventHandler (options) {\r\n  var hasClickedBefore = false\r\n  var timerId\r\n  return function (event) {\r\n    if (hasClickedBefore) {\r\n      options.handleDblClick.call(this, event)\r\n      hasClickedBefore = false\r\n      clearTimeout(timerId)\r\n    } else {\r\n      options.handleClick.call(this, event)\r\n      hasClickedBefore = true\r\n      setTimeout(() => {\r\n        hasClickedBefore = false\r\n      }, 300)\r\n    }\r\n  }\r\n}\r\n\r\n// produce following events:\r\n/**\r\n * add-node, remove-node, add-edge, remove-edge, swicth-state\r\n */\r\nexport default {\r\n  name: 'edit-board',\r\n  props: {\r\n    state: {\r\n      // Either 'edit', 'delete', 'create'\r\n      // You can do nothing in the `none` state\r\n      type: String,\r\n      default: 'edit'\r\n    },\r\n    name: {\r\n      type: String,\r\n      default: 'graph'\r\n    }\r\n  },\r\n  created () {\r\n    // This mehods has extra contexts, so it have to mixin after component's created.\r\n    this._handleEdgeClickEvent = _getEdgeClickEventHandler({\r\n      handleClick (event) {\r\n        if (this.state === 'delete') {\r\n          var source = event.target.getAttribute('data-edge-source')\r\n          var target = event.target.getAttribute('data-edge-target')\r\n          this.removeEdge(source, target)\r\n        }\r\n      },\r\n      handleDblClick (event) {\r\n        if (this.state === 'edit' && this.editState === 'none') {\r\n          this._startEditingEdge(event)\r\n        }\r\n      }\r\n    }).bind(this)\r\n  },\r\n  data: function () {\r\n    return {\r\n      nodeRadius: 20,\r\n      nodes: [],\r\n      edges: [],\r\n      freeEdge: {\r\n        source: { x: 0, y: 0 },\r\n        target: { x: 0, y: 0 }\r\n      },\r\n      selectedNode: undefined,\r\n      isFreeEdgeVisible: false,\r\n      isMovingNode: false,\r\n      editState: 'none',\r\n      nodeCounter: 0,\r\n      editFieldInput: '',\r\n      editTarget: undefined,\r\n      editFieldPosition: { x: 0, y: 0 },\r\n      nodeMenuPosition: { x: 0, y: 0 },\r\n      menuItems: [\r\n        { key: 'start', title: 'Set as start node' },\r\n        { key: 'finish', title: 'Set as finish node' },\r\n        { key: 'normal', title: 'Set as normal node' },\r\n        { key: 'start-finish', title: 'Set as start-finish node' }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    __temporary_getTransformOfSelfConnectedEdge (edge) {\r\n      var node = this._findNodeById(edge.target)\r\n      return `translate(${node.x}, ${node.y - 85})`\r\n    },\r\n    _linkArc (edge) {\r\n      var source = this._findNodeById(edge.source)\r\n      var target = this._findNodeById(edge.target)\r\n      if (source === target) {\r\n        return this._getRingPath(source.x, source.y)\r\n      } else {\r\n        return this._getArcPath(source.x, source.y, target.x, target.y)\r\n      }\r\n    },\r\n    _getRingPath (x, y) {\r\n      var len = 100;\r\n      var controlPoints = {\r\n        left: { x: x - len, y: y - len },\r\n        right: { x: x + len, y: y - len },\r\n      };\r\n\r\n      return `M ${x},${y} C ${controlPoints.left.x},${controlPoints.left.y} ${controlPoints.right.x},${controlPoints.right.y} ${x},${y}`\r\n    },\r\n    _getArcPath (sourceX, sourceY, targetX, targetY) {\r\n      var dx = sourceX - targetX\r\n      var dy = sourceY - targetY\r\n      var dr = Math.sqrt(dx * dx + dy * dy)\r\n      return `M ${sourceX}, ${sourceY} A ${dr},${dr} 0 0,1 ${targetX},${targetY}`\r\n    },\r\n    _handleNodeMouseMoveEvent (event) {\r\n      if (this.state === 'edit' && this.isMovingNode) {\r\n        event.preventDefault()\r\n        event.stopPropagation()\r\n        this._updateMovingNode(event)\r\n      }\r\n    },\r\n    _handleNodeMouseUpEvent (event) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      if (this.state === 'edit' && this.isMovingNode) {\r\n        this._stopMovingNode()\r\n      } else {\r\n        var targetNodeId = event.target.getAttribute('data-node-id')\r\n        if (this.state === 'create' && this.isFreeEdgeVisible) {\r\n          try {\r\n            this.addEdge({\r\n              source: this.selectedNode.id,\r\n              target: targetNodeId,\r\n              label: 'ε'\r\n            })\r\n          } catch (e) {\r\n            this.$emit('error', e)\r\n          }\r\n          this._stopLinkingNodes()\r\n        } else if (this.state === 'delete') {\r\n          this.removeNode(targetNodeId)\r\n        }\r\n      }\r\n    },\r\n    _handleNodeMouseDownEvent (event) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      if (this.state === 'edit') {\r\n        this._startMovingNode(event)\r\n      } else if (this.state === 'create') {\r\n        this._startLinkingNodes(event)\r\n      }\r\n    },\r\n    _handleNodeDblClickEvent (event) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      if (this.state === 'edit' && this.editState !== 'edit-node-label') {\r\n        this._startEditingNode(event)\r\n      }\r\n    },\r\n    _handleNodeContextMenuEvent (event) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n\r\n      if (this.state === 'edit' && this.editState !== 'open-node-menu') {\r\n        this._openNodeMenu(event)\r\n      }\r\n    },\r\n    _handleBoardMouseMoveEvent (event) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      if (this.state === 'create' && this.isFreeEdgeVisible) {\r\n        this._updateFreeEdgePosition(event)\r\n      } else if (this.state === 'edit' && this.isMovingNode) {\r\n        this._updateMovingNode(event)\r\n      }\r\n    },\r\n    _handleBoardMouseUpEvent (event) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n\r\n      if (this.state === 'create') {\r\n        if (this.isFreeEdgeVisible) {\r\n          this._stopLinkingNodes()\r\n        } else {\r\n          var mouse = this._getMousePosition(event)\r\n          this.addNode({\r\n            label: 'NODE #' + this.nodeCounter,\r\n            type: 'normal',\r\n            x: mouse.x,\r\n            y: mouse.y\r\n          })\r\n        }\r\n      }\r\n    },\r\n    _handleEdgeClickEvent (event) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      // eslint-disable-next-line\r\n      _handleEdgeClickEvent.call(this, event)\r\n    },\r\n    _handleOverlayClickEvent () {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      if (this.state === 'edit') {\r\n        if (this.editState === 'edit-edge-label' || this.editState === 'edge-node-label') {\r\n          this._commitInput()\r\n        } else {\r\n          this._terminateInput()\r\n        }\r\n      }\r\n    },\r\n    _handleMenuClickItemEvent (key) {\r\n      this.menuInput = key\r\n      this._commitInput()\r\n    },\r\n    _initFreeEdgePosition (event) {\r\n      var mouse = this._getMousePosition(event)\r\n      this.freeEdge.target.x = mouse.x\r\n      this.freeEdge.source.x = mouse.x\r\n      this.freeEdge.target.y = mouse.y\r\n      this.freeEdge.source.y = mouse.y\r\n    },\r\n    _updateFreeEdgePosition (event) {\r\n      var mouse = this._getMousePosition(event)\r\n      this.freeEdge.target.x = mouse.x\r\n      this.freeEdge.target.y = mouse.y\r\n    },\r\n    _updateMovingNode (event) {\r\n      var mouse = this._getMousePosition(event)\r\n      this.selectedNode.x = mouse.x\r\n      this.selectedNode.y = mouse.y\r\n    },\r\n    _setSelectedNodeFromEvent (event) {\r\n      var nodeId = event.target.getAttribute('data-node-id')\r\n      this.selectedNode = this._findNodeById(nodeId)\r\n    },\r\n    _startMovingNode (event) {\r\n      this.isMovingNode = true\r\n      this._setSelectedNodeFromEvent(event)\r\n    },\r\n    _stopMovingNode () {\r\n      this.isMovingNode = false\r\n      this.selectedNode = undefined\r\n    },\r\n    _startLinkingNodes (event) {\r\n      this._setSelectedNodeFromEvent(event)\r\n      this._initFreeEdgePosition(event)\r\n      this.isFreeEdgeVisible = true\r\n    },\r\n    _stopLinkingNodes () {\r\n      this.isFreeEdgeVisible = false\r\n      this.selectedNode = false\r\n    },\r\n    _getMousePosition (event) {\r\n      // e = Mouse click event.\r\n      var rect = this.$el.getBoundingClientRect()\r\n      return {\r\n        x: event.clientX - rect.left,\r\n        y: event.clientY - rect.top\r\n      }\r\n    },\r\n    _findNodeById (id) {\r\n      return this.nodes.find(node => node.id === String(id))\r\n    },\r\n    _findEdgeById (source, target) {\r\n      return this.edges.find(edge => edge.source === source && edge.target === target)\r\n    },\r\n    _findNodeIndexById (id) {\r\n      return this.nodes.findIndex(node => node.id === String(id))\r\n    },\r\n    _findEdgeIndexById (source, target) {\r\n      return this.edges.findIndex(edge => edge.source === source && edge.target === target)\r\n    },\r\n    _startEditingEdge (event) {\r\n      var source = event.target.getAttribute('data-edge-source')\r\n      var target = event.target.getAttribute('data-edge-target')\r\n      this.editTarget = this._findEdgeById(source, target)\r\n      this.editState = 'edit-edge-label'\r\n      this._setEditFieldPosition(event)\r\n    },\r\n    _startEditingNode (event) {\r\n      var id = event.target.getAttribute('data-node-id')\r\n      this.editTarget = this._findNodeById(id)\r\n      this.editState = 'edit-node-label'\r\n      this._setEditFieldPosition(event)\r\n    },\r\n    _setEditFieldPosition (event) {\r\n      var mouse = this._getMousePosition(event)\r\n      this.editFieldPosition.x = mouse.x\r\n      this.editFieldPosition.y = mouse.y\r\n    },\r\n    _openNodeMenu (event) {\r\n      var mouse = this._getMousePosition(event)\r\n      var id = event.target.getAttribute('data-node-id')\r\n      this.nodeMenuPosition.x = mouse.x\r\n      this.nodeMenuPosition.y = mouse.y\r\n      this.editTarget = this._findNodeById(id)\r\n      this.editState = 'open-node-menu'\r\n    },\r\n    _removeAllRelativeEdgesOfNode (id) {\r\n      this.edges = this.edges.filter(edge => edge.source !== id && edge.target !== id)\r\n    },\r\n    _commitInput () {\r\n      try {\r\n        this._checkEditFieldInput(this.editState, this.editFieldInput)\r\n        switch (this.editState) {\r\n          case 'none': return\r\n          case 'edit-edge-label':\r\n            this.setEdge(this.editTarget.source, this.editTarget.target, {\r\n              label: this.editFieldInput\r\n            })\r\n            break\r\n          case 'edit-node-label':\r\n            this.setNode(this.editTarget.id, {\r\n              label: this.editFieldInput\r\n            })\r\n            break\r\n          case 'open-node-menu':\r\n            this.setNode(this.editTarget.id, {\r\n              type: this.menuInput\r\n            })\r\n            break\r\n        }\r\n      } catch (e) {\r\n        this.$emit('error', e)\r\n      } finally {\r\n        this._terminateInput()\r\n      }\r\n    },\r\n    _terminateInput () {\r\n      this.editState = 'none'\r\n      this.editTarget = undefined\r\n    },\r\n    _checkEditFieldInput (state, input) {\r\n      if (input === '' && state === 'edit-edge-label') {\r\n        throw new Error('empty edge label')\r\n      } else if (input === '' && state === 'edit-node-label') {\r\n        throw new Error('empty node label')\r\n      }\r\n    },\r\n    _setNodeType (type) {\r\n      this.setNode(this.editTarget.id, { type })\r\n    },\r\n\r\n    addEdge (edge) {\r\n      if (this._findEdgeById(edge.source, edge.target) !== undefined) {\r\n        throw new Error('duplicate edge')\r\n      }\r\n      this.edges.push(new Edge(edge))\r\n      this.$emit('add-edge', new Edge(edge))\r\n    },\r\n    addNode (node) {\r\n      var options = {\r\n        id: this.nodeCounter++,\r\n        ...node\r\n      }\r\n      this.nodes.push(new Node(options))\r\n      this.$emit('add-node', new Node(options))\r\n    },\r\n    removeEdge (source, target) {\r\n      var index = this._findEdgeIndexById(source, target)\r\n      var edge = this.edges[index]\r\n      this.edges.splice(index, 1)\r\n      this.$emit('remove-edge', new Edge(edge))\r\n    },\r\n    removeNode (id) {\r\n      var index = this._findNodeIndexById(id)\r\n      var node = this.nodes[index]\r\n      this._removeAllRelativeEdgesOfNode(id)\r\n      this.nodes.splice(index, 1)\r\n      this.$emit('remove-node', new Node(node))\r\n    },\r\n    setNode (id, props) {\r\n      var index = this._findNodeIndexById(id)\r\n      var node = Object.assign({}, this.nodes[index], props)\r\n      this.$set(this.nodes, index, new Node(node))\r\n      this.$emit('set-node', node)\r\n    },\r\n    setEdge (source, target, props) {\r\n      var index = this._findEdgeIndexById(source, target)\r\n      var edge = Object.assign({}, this.edges[index], props)\r\n      this.$set(this.edges, index, new Edge(edge))\r\n      this.$emit('set-edge', edge)\r\n    },\r\n    getEdgeCount () {\r\n      return this.edges.length\r\n    },\r\n    getNodeCount () {\r\n      return this.nodes.length\r\n    }\r\n  },\r\n  computed: {\r\n    shouldShowOverlay () {\r\n      return this.editState !== 'none'\r\n    },\r\n    shouldShowEditField () {\r\n      return this.editState === 'edit-node-label' || this.editState === 'edit-edge-label'\r\n    },\r\n    shouldShowNodeMenu () {\r\n      return this.editState === 'open-node-menu'\r\n    }\r\n  },\r\n  components: {\r\n    EditField, DropMenu\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.base {\r\n  position: relative;\r\n  border: 2px brown solid;\r\n}\r\n.graph {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.edge {\r\n  fill: transparent;\r\n  stroke: black;\r\n  stroke-width: 3;\r\n}\r\n\r\n.edge-overlay {\r\n  fill: transparent;\r\n  stroke:rgba(200, 200, 200, 0.3);\r\n  stroke-width: 10;\r\n}\r\n\r\n.node {\r\n  fill: #999999;\r\n}\r\n\r\n.node-start {\r\n  stroke: #444444;\r\n}\r\n\r\n.node-finish {\r\n  stroke: #880000;\r\n}\r\n.node-start-finish {\r\n  stroke: #880000;\r\n}\r\n\r\n.edit-field {\r\n  position: absolute;\r\n  z-index: 1000;\r\n}\r\n\r\n.node-menu {\r\n  position: absolute;\r\n  z-index: 1000;\r\n}\r\n\r\n.overlay {\r\n  position: absolute;\r\n  z-index: 900;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.base {\r\n  position: relative;\r\n  border: 2px brown solid;\r\n}\r\n.graph {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.edge {\r\n  fill: transparent;\r\n  stroke: black;\r\n  stroke-width: 3;\r\n}\r\n.edge-overlay {\r\n  fill: transparent;\r\n  stroke:rgba(200, 200, 200, 0.3);\r\n  stroke-width: 10;\r\n}\r\n.node {\r\n  fill: #999999;\r\n}\r\n.node-start {\r\n  stroke: #444444;\r\n}\r\n.node-finish {\r\n  stroke: #880000;\r\n}\r\n.node-start-finish {\r\n  stroke: #880000;\r\n}\r\n.edit-field {\r\n  position: absolute;\r\n  z-index: 1000;\r\n}\r\n.node-menu {\r\n  position: absolute;\r\n  z-index: 1000;\r\n}\r\n.overlay {\r\n  position: absolute;\r\n  z-index: 900;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n","<template>\r\n  <ul class=\"edit-mode-buttons\">\r\n    <li class=\"edit-mode-button-item\" :class=\"{ 'edit-mode-button-item-selected': value === button.mode }\"  v-for=\"button of buttons\" :key=\"button.mode\">\r\n      <a  @click=\"$emit('input', button.mode)\">\r\n        {{ button.title }}\r\n      </a>\r\n    </li>\r\n    <li class=\"clearfix\" style=\"list-style-type: none\"></li>\r\n  </ul>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'edit-mode-button',\r\n  props: {\r\n    value: {\r\n      type: String,\r\n      default: 'add'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      buttons: [\r\n        { mode: 'create', title: 'Add', colorClass: ['amber'], },\r\n        { mode: 'delete', title: 'cancel', colorClass: ['red'] },\r\n        { mode: 'edit', title: 'Edit', colorClass: ['blue', 'darken-1'] }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    currentTitledButton () {\r\n      var result = this.buttons.find(button => button.mode === this.value)\r\n      return result\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.edit-mode-buttons {\r\n  padding: 0px;\r\n  border-radius: 5px;\r\n  border: 2px solid brown;\r\n  background: #bbbbbb;\r\n  box-shadow: 2px 2px 0 black;\r\n}\r\n.edit-mode-button-item {\r\n  float: left;\r\n  border-right: 1px solid brown;\r\n  padding: 5px 10px;\r\n  list-style-type: none;\r\n  cursor: pointer;\r\n}\r\n.edit-mode-button-item > a {\r\n  color: white;\r\n}\r\n.edit-mode-button-item-selected {\r\n  background-color: #777777;\r\n}\r\n.clearfix {\r\n  clear: both;\r\n}\r\n</style>\r\n\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.edit-mode-buttons {\r\n  padding: 0px;\r\n  border-radius: 5px;\r\n  border: 2px solid brown;\r\n  background: #bbbbbb;\r\n  -webkit-box-shadow: 2px 2px 0 black;\r\n          box-shadow: 2px 2px 0 black;\r\n}\r\n.edit-mode-button-item {\r\n  float: left;\r\n  border-right: 1px solid brown;\r\n  padding: 5px 10px;\r\n  list-style-type: none;\r\n  cursor: pointer;\r\n}\r\n.edit-mode-button-item > a {\r\n  color: white;\r\n}\r\n.edit-mode-button-item-selected {\r\n  background-color: #777777;\r\n}\r\n.clearfix {\r\n  clear: both;\r\n}\r\n","<template>\r\n  <div class=\"app\">\r\n        <side-panel class=\"side-panel\"></side-panel>\r\n        <edit-board class=\"edit-board\"\r\n          ref=\"editBoard\"\r\n          :state=\"editBoardState\"\r\n          @add-node=\"addNode\"\r\n          @remove-node=\"removeNode\"\r\n          @add-edge=\"addEdge\"\r\n          @remove-edge=\"removeEdge\"\r\n          @set-node=\"setNode\"\r\n          @set-edge=\"setEdge\"\r\n        ></edit-board>\r\n      <edit-mode-buttons v-model=\"editBoardState\" class=\"edit-mode-button\"></edit-mode-buttons>\r\n  </div>\r\n</template>\r\n<script>\r\n// '@' stands for the src directory, which is configured in /build/webpack.base.conf.js.\r\nimport SidePanel from '@/components/SidePanel.vue'\r\nimport EditBoard from '@/components/EditBoard.vue'\r\nimport EditModeButtons from '@/components/EditModeButtons.vue'\r\nimport { mapActions } from 'vuex'\r\nimport { Node, Edge } from '@/Automata.js'\r\n\r\nfunction mapNode (node) {\r\n  var type;\r\n  if (node.type === 'finish') {\r\n    type = 'final'\r\n  } else if (node.type === 'start') {\r\n    type = 'initial'\r\n  } else if (node.type === 'normal') {\r\n    type = 'normal'\r\n  } else if (node.type === 'start-finish') {\r\n    type = 'init final'\r\n  }\r\n  return new Node(node.id, type)\r\n}\r\n\r\nfunction getTrans (label) {\r\n  var split = label.split(',');\r\n  var transition = [];\r\n  for (var str of split) {\r\n    var match = str.match(/[^\\s]/);\r\n    if (match !== null) {\r\n      transition.push(match[0] === 'ε' ? '' : match[0])\r\n    }\r\n  }\r\n  return transition;\r\n}\r\n\r\nfunction mapEdge (edge) {\r\n  var trans = getTrans(edge.label);\r\n  return new Edge(edge.source, edge.target, new Set(getTrans(edge.label)))\r\n}\r\n\r\nexport default {\r\n  name: 'App',\r\n  data () {\r\n    return {\r\n      editBoardState: 'edit'\r\n    }\r\n  },\r\n  methods: {\r\n    addNode (node) {\r\n      this.$store.dispatch('addNode', mapNode(node))\r\n    },\r\n    addEdge (edge) {\r\n      this.$store.dispatch('addEdge', mapEdge(edge))\r\n    },\r\n    removeNode (node) {\r\n      this.$store.dispatch('removeNode', node.id)\r\n    },\r\n    removeEdge (edge) {\r\n      this.$store.dispatch('removeEdge', { source: edge.source, target: edge.target })\r\n    },\r\n    setNode (node) {\r\n      if (node.type !== undefined) {\r\n        this.$store.dispatch('setNodeType', mapNode(node))\r\n      }\r\n    },\r\n    setEdge (edge) {\r\n      if (edge.label !== undefined) {\r\n        this.$store.dispatch('setEdgeTransition', mapEdge(edge))\r\n      }\r\n    },\r\n  },\r\n  components: { SidePanel, EditBoard, EditModeButtons }\r\n}\r\n</script>\r\n<style scoped>\r\n.app {\r\n  display: flex;\r\n  position: relative;\r\n}\r\n.side-panel {\r\n  flex: 0 0 300px;\r\n  margin-right: 30px;\r\n}\r\n.edit-board {\r\n  flex: 1 1 400px;\r\n  min-width: 400px;\r\n}\r\n.edit-mode-button {\r\n  position: absolute;\r\n  bottom: 30px;\r\n  right: 30px;\r\n}\r\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.app {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  position: relative;\r\n}\r\n.side-panel {\r\n  -webkit-box-flex: 0;\r\n      -ms-flex: 0 0 300px;\r\n          flex: 0 0 300px;\r\n  margin-right: 30px;\r\n}\r\n.edit-board {\r\n  -webkit-box-flex: 1;\r\n      -ms-flex: 1 1 400px;\r\n          flex: 1 1 400px;\r\n  min-width: 400px;\r\n}\r\n.edit-mode-button {\r\n  position: absolute;\r\n  bottom: 30px;\r\n  right: 30px;\r\n}\r\n","<template>\r\n  <div class=\"generator-board\">\r\n    <header class=\"header\">\r\n      <h4 class=\"title\">Generator board</h4>\r\n      <button class=\"action-button italic\" id=\"goto-automata-page\" @click=\"$router.push('/')\"> &lt;&lt;&lt; Go to automata page</button>\r\n    </header>\r\n    <div class=\"content\">\r\n      <div class=\"action-area\">\r\n        <button class=\"action-button\" @click=\"generateNFA\">generate NFA</button>\r\n        <button class=\"action-button\" @click=\"generateDFA\">generate DFA</button>\r\n        <input\r\n          placeholder=\"Enter your regular expression here ...\"\r\n          class=\"action-input\"\r\n          type=\"text\"\r\n          :value=\"regexStr\"\r\n          @input=\"_handleInput\"\r\n        />\r\n      </div>\r\n      <div class=\"error-prompt\">{{ errorPrompt }}</div>\r\n      <div class=\"divider\"></div>\r\n      <div class=\"graph-wrapper\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { toDotScript } from '../fsm/dot-converter'\r\nimport { RegParser } from '../fsm/regparser'\r\nimport Viz from 'viz.js'\r\nimport { Module, render } from 'viz.js/full.render.js'\r\nimport svgPanZoom from 'svg-pan-zoom'\r\n\r\nexport default {\r\n    name: 'generator-board',\r\n    mounted () {\r\n        this.$graphMountPoint = document.getElementsByClassName('graph-wrapper')[0]\r\n        this.$graph = undefined\r\n        this.$viz = new Viz({ Module, render })\r\n    },\r\n    data () {\r\n        return {\r\n            regexStr: '',\r\n            errorPrompt: ''\r\n        }\r\n    },\r\n    methods: {\r\n        generateNFA (regexStr) {\r\n            this.generateFSM(regexStr, 'nfa')\r\n        },\r\n        generateDFA (regexStr) {\r\n            this.generateFSM(regexStr, 'dfa')\r\n        },\r\n        generateFSM (regexStr, type) {\r\n            try {\r\n                var parser = new RegParser(this.regexStr)\r\n                var fsm = type === 'dfa' ? parser.parseToDFA() : parser.parseToNFA()\r\n                var dotScript = toDotScript(fsm)\r\n                this.$viz.renderSVGElement(dotScript)\r\n                  .then(el => {\r\n                    this.$graph = el\r\n                    this.$graphMountPoint.innerHTML = ''\r\n                    this.$graphMountPoint.appendChild(el)\r\n                    this._setupGraphStyle();\r\n                  })\r\n            } catch (e) {\r\n              console.log(e)\r\n              this.errorPrompt = e.message\r\n            }\r\n        },\r\n        _handleInput (event) {\r\n          this.errorPrompt = ''\r\n          this.regexStr = event.target.value\r\n        },\r\n        _setupGraphStyle () {\r\n          console.log(this.$graph)\r\n          this.$graph.setAttribute('width', '100%')\r\n          this.$graph.setAttribute('height', '100%')\r\n          this.$graph.classList.add('fsm-graph')\r\n          svgPanZoom(this.$graph, {\r\n            controlIconsEnabled: true\r\n          })\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.content {\r\n    width: 960px;\r\n    margin: 10px auto;\r\n    background-color: #E4E4E4;\r\n    border: 5px solid rgb(102, 38, 38);\r\n    border-radius: 5px;\r\n}\r\n.title {\r\n    text-align: center;\r\n    width: 500px;\r\n    margin: 0 auto;\r\n    padding: 5px;\r\n}\r\n\r\n.header {\r\n    width: 960px;\r\n    margin: 0 auto;\r\n    position: relative;\r\n}\r\n\r\n.action-area {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-top: 25px;\r\n    margin: 10px 5px;\r\n}\r\n\r\n.action-button {\r\n    flex-shrink: 0;\r\n    flex-grow: 0;\r\n    margin-left: 10px;\r\n    padding: 6px 16px;\r\n    border: 3px outset rgb(102, 38, 38);\r\n    background-color: rgb(206, 238, 226);\r\n    box-sizing: border-box;\r\n    box-shadow: 3px 3px 1px black;\r\n    font-size: 18px;\r\n}\r\n.action-button:hover {\r\n    box-shadow: 3px 3px 1px #999999;\r\n}\r\n.action-button:active {\r\n    box-shadow: 3px 3px 1px #999999;\r\n    background-color: rgb(130, 100, 70);\r\n}\r\n.action-input {\r\n  margin: 0 10px;\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  height: 40px;\r\n  border: 3px solid rgb(102, 38, 38);\r\n  box-shadow: 3px 3px 1px black;\r\n  font-size: 20px;\r\n}\r\n\r\n.divider {\r\n  height: 0;\r\n  margin-top: 15px;\r\n  border-bottom: 2px solid black;\r\n}\r\nbutton {\r\n    border: none;\r\n}\r\n\r\n.graph-wrapper {\r\n  background-color: #FFFFFF;\r\n  width: 100%;\r\n  height: 400px;\r\n}\r\n.fsm-graph {\r\n  background-color: transparent;\r\n  width: 400px;\r\n  height: 100%;\r\n  cursor: move;\r\n}\r\n\r\n.fsm-graph * {\r\n  background-color: transparent;\r\n  cursor: move;\r\n}\r\n\r\n.title {\r\n  font-family: 'Courier New', Courier, monospace;\r\n  font-size: 36px;\r\n}\r\n\r\n.error-prompt {\r\n  height: 20px;\r\n  font-size: 16px;\r\n}\r\n\r\n#goto-automata-page {\r\n  position: absolute;\r\n  left: 15px;\r\n  top: 5px;\r\n}\r\n.italic {\r\n  font-style: italic;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.content {\r\n    width: 960px;\r\n    margin: 10px auto;\r\n    background-color: #E4E4E4;\r\n    border: 5px solid rgb(102, 38, 38);\r\n    border-radius: 5px;\r\n}\r\n.title {\r\n    text-align: center;\r\n    width: 500px;\r\n    margin: 0 auto;\r\n    padding: 5px;\r\n}\r\n.header {\r\n    width: 960px;\r\n    margin: 0 auto;\r\n    position: relative;\r\n}\r\n.action-area {\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-pack: start;\r\n        -ms-flex-pack: start;\r\n            justify-content: flex-start;\r\n    -webkit-box-align: center;\r\n        -ms-flex-align: center;\r\n            align-items: center;\r\n    margin-top: 25px;\r\n    margin: 10px 5px;\r\n}\r\n.action-button {\r\n    -ms-flex-negative: 0;\r\n        flex-shrink: 0;\r\n    -webkit-box-flex: 0;\r\n        -ms-flex-positive: 0;\r\n            flex-grow: 0;\r\n    margin-left: 10px;\r\n    padding: 6px 16px;\r\n    border: 3px outset rgb(102, 38, 38);\r\n    background-color: rgb(206, 238, 226);\r\n    -webkit-box-sizing: border-box;\r\n            box-sizing: border-box;\r\n    -webkit-box-shadow: 3px 3px 1px black;\r\n            box-shadow: 3px 3px 1px black;\r\n    font-size: 18px;\r\n}\r\n.action-button:hover {\r\n    -webkit-box-shadow: 3px 3px 1px #999999;\r\n            box-shadow: 3px 3px 1px #999999;\r\n}\r\n.action-button:active {\r\n    -webkit-box-shadow: 3px 3px 1px #999999;\r\n            box-shadow: 3px 3px 1px #999999;\r\n    background-color: rgb(130, 100, 70);\r\n}\r\n.action-input {\r\n  margin: 0 10px;\r\n  -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n          flex-grow: 1;\r\n  -ms-flex-negative: 1;\r\n      flex-shrink: 1;\r\n  height: 40px;\r\n  border: 3px solid rgb(102, 38, 38);\r\n  -webkit-box-shadow: 3px 3px 1px black;\r\n          box-shadow: 3px 3px 1px black;\r\n  font-size: 20px;\r\n}\r\n.divider {\r\n  height: 0;\r\n  margin-top: 15px;\r\n  border-bottom: 2px solid black;\r\n}\r\nbutton {\r\n    border: none;\r\n}\r\n.graph-wrapper {\r\n  background-color: #FFFFFF;\r\n  width: 100%;\r\n  height: 400px;\r\n}\r\n.fsm-graph {\r\n  background-color: transparent;\r\n  width: 400px;\r\n  height: 100%;\r\n  cursor: move;\r\n}\r\n.fsm-graph * {\r\n  background-color: transparent;\r\n  cursor: move;\r\n}\r\n.title {\r\n  font-family: 'Courier New', Courier, monospace;\r\n  font-size: 36px;\r\n}\r\n.error-prompt {\r\n  height: 20px;\r\n  font-size: 16px;\r\n}\r\n#goto-automata-page {\r\n  position: absolute;\r\n  left: 15px;\r\n  top: 5px;\r\n}\r\n.italic {\r\n  font-style: italic;\r\n}\r\n"]}